version: '3.8'
networks:
  pulsar:
    driver: bridge

services:
  # Pulsar standalone - Incluye ZooKeeper, BookKeeper y Broker en un solo contenedor
  pulsar:
    image: apachepulsar/pulsar:latest
    container_name: pulsar
    hostname: pulsar
    restart: on-failure
    networks:
      - pulsar
    user: "0:0"  # Ejecutar como root para evitar problemas de permisos
    environment:
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m
    volumes:
      - ./data/pulsar:/pulsar/data
    ports:
      - "6650:6650"  # Pulsar broker port
      - "8080:8080"  # Pulsar admin port
    command: |
      bash -c "
        chown -R pulsar:pulsar /pulsar/data || true
        exec bin/pulsar standalone
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/admin/v2/brokers/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 30
      start_period: 60s

  # AlpesPartners Flask API
  alpespartners:
    build:
      context: .
      dockerfile: src/alpespartners/Dockerfile
    container_name: alpespartners-api
    hostname: alpespartners-api
    restart: on-failure
    networks:
      - pulsar
    ports:
      - "5001:5000"  # Flask app port (changed to avoid conflicts)
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - BROKER_HOST=pulsar
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-admin}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-alpespartners}
    depends_on:
      pulsar:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Servicio de Notificaciones
  notificaciones:
    build:
      context: .
      dockerfile: src/notificaciones/Dockerfile
    container_name: notificaciones-service
    hostname: notificaciones-service
    restart: on-failure
    networks:
      - pulsar
    environment:
      - PULSAR_ADDRESS=pulsar
    depends_on:
      pulsar:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app

  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    restart: on-failure
    networks:
      - pulsar
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-admin}
      - POSTGRES_DB=${DB_NAME:-alpespartners}
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


